
{%- for constant in FLAT_CONSTANTS %}
{{ constant | safe -}}
{%- endfor %}

_SPARSE_NAME_MAP = {
{%- for entry in NAME_MAP %}
    {{ entry | safe -}},
{%- endfor %}
}

{% raw %}
def _process_passthrough(_nv_class, _nv_op, nv_param) -> str:
    """Simply passes through the param value."""
    return f"0x{nv_param:08X} => {nv_param}"


def _process_float_param(_nv_class, _nv_op, nv_param) -> str:
    """Treats the param value as an IEEE float"""
    float_val = struct.unpack("f", nv_param.to_bytes(4, byteorder=sys.byteorder))
    return f"0x{nv_param:08X} => {float_val[0]}"


def _process_x_3_fixed_point(_nv_class, _nv_op, nv_param: int) -> str:
    """Treats the param as an x.3 fixed point value (no sign extension)."""
    return f"0x{nv_param:08X} => {float(nv_param) / 8.0}"


def _process_boolean_param(_nv_class, _nv_op, nv_param) -> str:
    """Treats the param value as a boolean."""
    if nv_param == 0:
        return "FALSE"
    if nv_param == 1:
        return "TRUE"

    return f"0x{nv_param:08X} => TRUE?"


def _generate_process_double_uint16(low, high):
    def _process_double_uint16(_nv_class, _nv_op, nv_param):
        low_val = nv_param & 0xFFFF
        high_val = (nv_param >> 16) & 0xFFFF
        return f"0x{nv_param:08X} {{{low}:{low_val}, {high}:{high_val}}}"

    return _process_double_uint16


def _expand_processors(
    processors: dict[int, dict[int | StateArray | StructStateArray, ProcessorFunc]],
) -> tuple[dict[tuple[int, int], ProcessorFunc], dict[tuple[int, int], str]]:
    """Flattens processor mapping into processor funcs and names."""
    flat_processors: dict[tuple[int, int], ProcessorFunc] = {}
    flat_names: dict[tuple[int, int], str] = {}

    def _insert(key: tuple[int, int], processor: ProcessorFunc, name: str):
        if key in flat_names:
            msg = f"Colliding key '{key}': old name: '{flat_names[key]}' new name: '{name}'"
            raise ValueError(msg)

        flat_processors[key] = processor
        flat_names[key] = name

    for nv_class, operations in processors.items():
        for nv_op_info, processor in operations.items():
            cmd_type = type(nv_op_info)
            base_key = (nv_class, nv_op_info)
            if cmd_type is int:
                _insert(base_key, processor, _SPARSE_NAME_MAP[base_key])
                continue

            if cmd_type is StateArray:
                base = nv_op_info.base
                name = _SPARSE_NAME_MAP[(nv_class, base)]
                stride = nv_op_info.stride
                count = nv_op_info.num_elements
                for i in range(count):
                    _insert((nv_class, base + i * stride), processor, f"{name}[{i}]")
                continue

            if cmd_type is StructStateArray:
                base = nv_op_info.base
                name = _SPARSE_NAME_MAP[(nv_class, base)]
                struct_stride = nv_op_info.struct_stride
                struct_count = nv_op_info.struct_count
                stride = nv_op_info.stride
                count = nv_op_info.num_elements

                for struct in range(struct_count):
                    for i in range(count):
                        _insert((nv_class, base + i * stride), processor, f"{name}@{struct}[{i}]")
                    base += struct_stride
                continue

            msg = f"Unsupported processor map entry '{nv_op_info}'"
            raise ValueError(msg)

    return flat_processors, flat_names
{% endraw %}

# Custom parser functions.

{% for entry in PARSERS %}
{{ entry | safe -}}
{% endfor %}


CLASS_TO_COMMAND_PROCESSOR_MAP: dict[int, dict[int | StateArray | StructStateArray, ProcessorFunc]] = {
{%- for entry in PROCESSOR_MAP %}
{{ entry | safe -}}
{%- endfor %}
}

# Mapping of graphics class to commands and processors.
PROCESSORS: dict[tuple[int, int], ProcessorFunc]
_NAME_MAP: dict[tuple[int, int], str]
PROCESSORS, _NAME_MAP = _expand_processors(CLASS_TO_COMMAND_PROCESSOR_MAP)


@dataclass
class CommandInfo:
    """Verbosely describes an nv2a command."""

    channel: int
    nv_class: int
    nv_op: int
    nv_param: int
    nv_op_name: str = ""
    nv_class_name: str = ""

    def __post_init__(self):
        self.process()

    @property
    def pretty_suffix(self) -> str:
        class_info = f"{self.nv_class_name}<0x{self.nv_class:x}>" if self.nv_class_name else f"0x{self.nv_class:x}"
        op_info = f"{self.nv_op_name}<0x{self.nv_op:x}>" if self.nv_op_name else f"0x{self.nv_op:x}"

        return f"{self.channel}: {class_info} -> {op_info} ({self.param_info})"

    def get_pretty_string(self) -> str:
        return f"nv2a_pgraph_method {self.pretty_suffix}"

    def process(self):
        processor_key = (self.nv_class, self.nv_op)
        processor = PROCESSORS.get(processor_key)
        if processor:
            self.param_info = processor(self.nv_class, self.nv_op, self.nv_param)
        else:
            self.param_info = f"0x{self.nv_param:x}"


def get_command_info(channel: int, nv_class: int, nv_op: int, nv_param: int) -> CommandInfo:
    processor_key = (nv_class, nv_op)
    if processor_key not in PROCESSORS:
        return CommandInfo(channel, nv_class, nv_op, nv_param)

    op_name = _NAME_MAP.get(processor_key)
    return CommandInfo(channel, nv_class, nv_op, nv_param, op_name)
